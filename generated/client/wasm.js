
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CategoriesScalarFieldEnum = {
  category_id: 'category_id',
  category_name: 'category_name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  user_id: 'user_id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  role: 'role',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IssuesScalarFieldEnum = {
  issue_id: 'issue_id',
  title: 'title',
  description: 'description',
  categoryId: 'categoryId',
  userId: 'userId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LocationsScalarFieldEnum = {
  location_id: 'location_id',
  latitude: 'latitude',
  longitude: 'longitude',
  address: 'address',
  issueId: 'issueId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttachmentsScalarFieldEnum = {
  attachment_id: 'attachment_id',
  file_url: 'file_url',
  issueId: 'issueId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.UserList = exports.$Enums.UserList = {
  Citizen: 'Citizen',
  Admin: 'Admin',
  Staff: 'Staff'
};

exports.statusList = exports.$Enums.statusList = {
  Pending: 'Pending',
  In_Progress: 'In_Progress',
  Resolved: 'Resolved'
};

exports.Prisma.ModelName = {
  Categories: 'Categories',
  Users: 'Users',
  Issues: 'Issues',
  Locations: 'Locations',
  Attachments: 'Attachments'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/afidhu/Desktop/Citizen_Issue_Reporting_System/generated/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/afidhu/Desktop/Citizen_Issue_Reporting_System/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  // output   = \"../src/generated/prisma\"\n  // output   = \"./generated/client\" \n  output   = \"../generated/client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum UserList {\n  Citizen\n  Admin\n  Staff\n}\n\nenum statusList {\n  Pending\n  In_Progress\n  Resolved\n}\n\n// categories\n//     Garbage\n//     Water Leakage\n//     Streetlight\n//     Road Damage\n//     Electricity\n//     School Facility\nmodel Categories {\n  category_id   Int      @id @default(autoincrement())\n  category_name String\n  issue         Issues[]\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt()\n}\n\nmodel Users {\n  user_id   Int      @id @default(autoincrement())\n  name      String\n  email     String   @unique\n  phone     Int\n  role      UserList @default(Citizen)\n  issue     Issues[]\n  password  String   @db.VarChar(200)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt()\n}\n\nmodel Issues {\n  issue_id    Int           @id @default(autoincrement())\n  title       String        @db.VarChar(100)\n  description String        @db.Text\n  categoryId  Int\n  category    Categories    @relation(fields: [categoryId], references: [category_id])\n  userId      Int\n  user        Users         @relation(fields: [userId], references: [user_id])\n  locations   Locations[]\n  attachments Attachments[]\n  status      statusList    @default(Pending)\n  createdAt   DateTime      @default(now())\n  updatedAt   DateTime      @updatedAt()\n}\n\nmodel Locations {\n  location_id Int      @id @default(autoincrement())\n  latitude    Float\n  longitude   Float\n  address     String\n  issueId     Int\n  issues      Issues   @relation(fields: [issueId], references: [issue_id])\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt()\n}\n\nmodel Attachments {\n  attachment_id Int      @id @default(autoincrement())\n  file_url      String\n  issueId       Int\n  issues        Issues   @relation(fields: [issueId], references: [issue_id])\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt()\n}\n",
  "inlineSchemaHash": "2ac1be18243bfde3552e74671117c4f17d22b2896480cc41deddd511f5d2aeba",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Categories\":{\"fields\":[{\"name\":\"category_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"category_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"issue\",\"kind\":\"object\",\"type\":\"Issues\",\"relationName\":\"CategoriesToIssues\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Users\":{\"fields\":[{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserList\"},{\"name\":\"issue\",\"kind\":\"object\",\"type\":\"Issues\",\"relationName\":\"IssuesToUsers\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Issues\":{\"fields\":[{\"name\":\"issue_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"categoryId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"Categories\",\"relationName\":\"CategoriesToIssues\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"IssuesToUsers\"},{\"name\":\"locations\",\"kind\":\"object\",\"type\":\"Locations\",\"relationName\":\"IssuesToLocations\"},{\"name\":\"attachments\",\"kind\":\"object\",\"type\":\"Attachments\",\"relationName\":\"AttachmentsToIssues\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"statusList\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Locations\":{\"fields\":[{\"name\":\"location_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"issueId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"issues\",\"kind\":\"object\",\"type\":\"Issues\",\"relationName\":\"IssuesToLocations\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Attachments\":{\"fields\":[{\"name\":\"attachment_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"file_url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"issueId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"issues\",\"kind\":\"object\",\"type\":\"Issues\",\"relationName\":\"AttachmentsToIssues\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

